## **JavaScript Execution Context (Detailed Notes)**  

### **üîπ What is Execution Context?**  
Execution Context is the **environment** where JavaScript code is executed. It determines how functions and variables are stored and accessed.  

---

## **üîπ Types of Execution Context**  
1Ô∏è‚É£ **Global Execution Context (GEC)**  
   - Default execution context.  
   - Created when JavaScript starts execution.  
   - `this` in GEC refers to the **global object** (`window` in browsers, `global` in Node.js).  

2Ô∏è‚É£ **Function Execution Context (FEC)**  
   - Created whenever a function is called.  
   - Each function has its own execution context.  
   - A function's execution context is removed after execution is complete.  

3Ô∏è‚É£ **Eval Execution Context**  
   - Created when code is executed inside `eval()`.  
   - Not commonly used in modern JavaScript.  

---

## **üîπ Execution Context Lifecycle**  
Every execution context goes through **three phases**:  

### **1Ô∏è‚É£ Creation Phase (Memory Creation)**
- Happens **before** execution starts.  
- JavaScript creates the **Global Execution Context** first.  
- **Function and Variable Hoisting Occurs:**
  - Functions are stored in memory **with their definitions**.
  - Variables are set to **`undefined`** (if declared with `var`).  

üëâ Example:  
```js
console.log(name); // undefined
var name = "John";

greet(); // "Hello!"
function greet() {
    console.log("Hello!");
}
```
**Explanation:**  
- `greet()` is stored **fully** in memory.  
- `name` is stored as **`undefined`** initially (hoisting).  

---

### **2Ô∏è‚É£ Execution Phase (Code Execution)**
- JavaScript **executes** the code line by line.  
- Values are assigned to variables.  
- Functions are executed if called.  

üëâ Example:  
```js
var name = "John";
console.log(name); // "John"
```
Now, `name` is assigned `"John"` and printed.  

---

### **3Ô∏è‚É£ Deletion Phase (Cleanup)**
- Once execution is completed, the function's execution context is **deleted** from the stack.  
- Global Execution Context **remains until the program finishes**.  

---

## **üîπ Execution Stack (Call Stack)**
JavaScript follows a **stack-based model** for execution:  
- The **Global Execution Context (GEC)** is pushed first.  
- When a function is called, a **Function Execution Context (FEC)** is pushed on top.  
- After function execution, its context is **popped off**.  

üëâ Example:  
```js
function first() {
    console.log("First function");
    second();
}
function second() {
    console.log("Second function");
}
first();
console.log("End");
```
**Execution Order in Call Stack:**  
1Ô∏è‚É£ GEC (`first()` is called)  
2Ô∏è‚É£ `first()` execution context is pushed  
3Ô∏è‚É£ Inside `first()`, `second()` is called ‚Üí **New context created**  
4Ô∏è‚É£ `second()` completes ‚Üí Its context is popped  
5Ô∏è‚É£ `first()` completes ‚Üí Its context is popped  